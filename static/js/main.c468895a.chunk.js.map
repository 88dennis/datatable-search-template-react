{"version":3,"sources":["components/DataTable.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","data","console","log","columns","Object","keys","className","map","heading","index","key","scope","row","column","Home","useState","setData","searchColumns","setSearchColumns","query","setQuery","fetchData","a","fetch","then","response","json","useEffect","itemsFromData","htmlFor","type","value","onChange","e","target","id","placeholder","checked","includes","prev","filter","sc","dataItem","some","toString","toLowerCase","indexOf","App","basename","process","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iSAgCeA,EA5BG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAAUH,EAAK,IAAMI,OAAOC,KAAKL,EAAK,IACxC,OACI,oCAGI,2BAAOM,UAAU,SACb,+BACI,4BACKN,EAAK,IAAMG,EAAQI,KAAI,SAACC,EAASC,GAAV,OAAoB,wBAAIC,IAAKD,EAAME,MAAM,OAAOH,QAGhF,+BACKR,EAAKO,KAAI,SAACK,EAAKH,GAAN,OAAe,wBAAIC,IAAKD,GAG1BN,EAAQI,KAAI,SAACM,EAAQJ,GAAT,OAAmB,wBAAIC,IAAKD,GAAQG,EAAIC,eCsFjEC,EAvGF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVf,EADU,KACJgB,EADI,OAEyBD,mBAAS,CAAC,oBAAqB,qBAFxD,mBAEVE,EAFU,KAEKC,EAFL,OAKSH,mBAAS,IALlB,mBAKVI,EALU,KAKHC,EALG,KAOXC,EAAS,uCAAG,sBAAAC,EAAA,sEACHC,MAAM,cAChBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACLV,EAAQU,MAJI,mFAAH,qDAOfC,qBAAU,WACRN,MACC,CAACF,EAAOF,IAoCb,IARkBW,EAQZzB,EAAUH,EAAK,IAAMI,OAAOC,KAAKL,EAAK,IAI1C,OAHFC,QAAQC,IAAIC,GAIR,oCACE,gDACA,yBAAKG,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kCACb,8BACE,yBAAKA,UAAU,cACb,2BAAOuB,QAAQ,gBAAf,UACA,2BACEC,KAAK,OACLC,MAAOZ,GAAS,GAChBa,SAAU,SAACC,GAAD,OAAMb,EAASa,EAAEC,OAAOH,QAClCzB,UAAU,eACV6B,GAAG,eACHC,YAAY,eAOtB,yBAAK9B,UAAU,OACZ,yBAAKA,UAAU,2CAEVH,GAAWA,EAAQI,KAAI,SAACM,GACrB,OAAO,wCAAG,+BACN,2BAAOiB,KAAK,WAAWO,QAASpB,EAAcqB,SAASzB,GACvDmB,SAAU,SAACC,GACP,IAAMI,EAAUpB,EAAcqB,SAASzB,GACvCK,GACC,SAACqB,GAAD,OAAUF,EAAUE,EAAKC,QAAO,SAACC,GAAD,OAAOA,IAAO5B,KAA7B,sBAA2C0B,GAA3C,CAAiD1B,UAIvE,8BAAO,KATD,IASa,8BAAOA,IAEtB,8BAAO,YAK5B,kBAAC,EAAD,CAAWb,MAtDC4B,EAsDY5B,EArDnB4B,EAAcY,QAAO,SAAAE,GAAQ,OACjCzB,EAAc0B,MACX,SAAC9B,GAAD,OAAY6B,EAAS7B,GAAQ+B,WAAWC,cAAcC,QAAQ3B,EAAM0B,gBAAkB,aChCjFE,MAXf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,oCAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWrC,EAAMsC,OAAK,OCAxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.c468895a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n// let isMounted = false;\r\nconst DataTable = ({data}) => {\r\nconsole.log(data)\r\nconst columns = data[0] && Object.keys(data[0])\r\n    return (\r\n        <>\r\n            {/* <table className=\"table\" cellPadding={0} cellSpacing={0}> */}\r\n          \r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        {data[0] && columns.map((heading, index) => <th key={index}scope=\"col\">{heading}</th>)}\r\n                    </tr>   \r\n                </thead>\r\n                <tbody>\r\n                    {data.map((row, index)=> <tr key={index}>\r\n                        {\r\n                            // columns.map(column => <td>{JSON.stringify(row[column])}</td>)\r\n                            columns.map((column, index) => <td key={index}>{row[column]}</td>)\r\n\r\n                            }\r\n                        </tr>)}\r\n                </tbody>\r\n            </table>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DataTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DataTable from \"./DataTable\";\r\n\r\n// let isMounted = false;\r\nconst Home = () => {\r\n  const [data, setData] = useState([]);\r\n  const [searchColumns, setSearchColumns] = useState([\"borrowerFirstName\", \"borrowerUserName\"]);\r\n\r\n\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const fetchData = async () => {\r\n    return await fetch(\"/data.json\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        setData(json);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [query, searchColumns]);\r\n\r\n\r\n//   function search(itemsFromData){\r\n//       return itemsFromData.filter(dataItem => {\r\n          \r\n//         return dataItem.borrowerFirstName.toLowerCase().indexOf(query) > -1 ||\r\n//         dataItem.borrowerUserName.toLowerCase().indexOf(query) > -1 ||\r\n//         dataItem.borrowerEmail.toLowerCase().indexOf(query) > -1 ||\r\n//         dataItem.lenderUserName.toLowerCase().indexOf(query) > -1 ||\r\n//         dataItem.lenderEmail.toLowerCase().indexOf(query) > -1\r\n    \r\n//     }\r\n      \r\n//       )\r\n//   }\r\n\r\n//REFACTOR - FUNCTION TO SEARCH ALL COLUMNS IN YOUR TABLE BASICALLY SEARCH ALL YOUR DATA\r\n//   function search(itemsFromData){\r\n//       const columns = itemsFromData[0] && Object.keys(itemsFromData[0])\r\n//       return itemsFromData.filter(dataItem => \r\n//          columns.some(\r\n//             (column) => dataItem[column].toString().toLowerCase().indexOf(query.toLowerCase()) > -1\r\n//             )\r\n//       )\r\n//   }\r\n\r\n//TO SEARCH ONLY SPECIFIC COLUMNS\r\n  function search(itemsFromData){\r\n    return itemsFromData.filter(dataItem => \r\n       searchColumns.some(\r\n          (column) => dataItem[column].toString().toLowerCase().indexOf(query.toLowerCase()) > -1\r\n          )\r\n    )\r\n}\r\n\r\nconst columns = data[0] && Object.keys(data[0]);\r\nconsole.log(columns)\r\n\r\n\r\n  return (\r\n    <>\r\n      <h1>Filter Goes Here</h1>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-sm-12\">\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"queryInputId\">Search</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={query || ''}\r\n                  onChange={(e)=> setQuery(e.target.value)}\r\n                  className=\"form-control\"\r\n                  id=\"queryInputId\"\r\n                  placeholder=\"Search\"\r\n                />\r\n              </div>\r\n       \r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n           <div className=\"col-md-6 col-md-6 offset-md-3 col-sm-12\">\r\n\r\n               {columns && columns.map((column)=> {\r\n                   return <> <label>\r\n                       <input type=\"checkbox\" checked={searchColumns.includes(column)}\r\n                       onChange={(e)=>{\r\n                           const checked = searchColumns.includes(column);\r\n                           setSearchColumns(\r\n                            (prev) => checked ? prev.filter((sc)=> sc !== column) : [...prev, column]\r\n                            );\r\n                       }}\r\n                       />\r\n                       <span>{\" \"}</span> <span>{column}</span>\r\n\r\n                   </label><span>{\" \"}</span>\r\n                   </> })}\r\n           </div>\r\n        </div>\r\n      </div>\r\n      <DataTable data={search(data)} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport './App.css';\n\n// import { HashRouter, Route, Switch } from \"react-router-dom\"\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route path=\"/\" component={Home} exact />\n    </Switch>\n  </Router>\n \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}